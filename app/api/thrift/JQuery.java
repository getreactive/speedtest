/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package api.thrift;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-18")
public class JQuery implements org.apache.thrift.TBase<JQuery, JQuery._Fields>, java.io.Serializable, Cloneable, Comparable<JQuery> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JQuery");

  private static final org.apache.thrift.protocol.TField SELECT_FIELD_DESC = new org.apache.thrift.protocol.TField("select", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AGGREGATE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggregate", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField GROUPBY_FIELD_DESC = new org.apache.thrift.protocol.TField("groupby", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORDERBY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderby", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField STARTTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("starttime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ENDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endtime", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JQueryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JQueryTupleSchemeFactory());
  }

  public String select; // required
  public JAggregate aggregate; // required
  public List<JFilter> filter; // required
  public String groupby; // required
  public List<String> orderby; // required
  public String starttime; // required
  public String endtime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SELECT((short)1, "select"),
    AGGREGATE((short)2, "aggregate"),
    FILTER((short)3, "filter"),
    GROUPBY((short)4, "groupby"),
    ORDERBY((short)5, "orderby"),
    STARTTIME((short)6, "starttime"),
    ENDTIME((short)7, "endtime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SELECT
          return SELECT;
        case 2: // AGGREGATE
          return AGGREGATE;
        case 3: // FILTER
          return FILTER;
        case 4: // GROUPBY
          return GROUPBY;
        case 5: // ORDERBY
          return ORDERBY;
        case 6: // STARTTIME
          return STARTTIME;
        case 7: // ENDTIME
          return ENDTIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SELECT, new org.apache.thrift.meta_data.FieldMetaData("select", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGGREGATE, new org.apache.thrift.meta_data.FieldMetaData("aggregate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "JAggregate")));
    tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "JFilter"))));
    tmpMap.put(_Fields.GROUPBY, new org.apache.thrift.meta_data.FieldMetaData("groupby", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDERBY, new org.apache.thrift.meta_data.FieldMetaData("orderby", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STARTTIME, new org.apache.thrift.meta_data.FieldMetaData("starttime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENDTIME, new org.apache.thrift.meta_data.FieldMetaData("endtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JQuery.class, metaDataMap);
  }

  public JQuery() {
  }

  public JQuery(
    String select,
    JAggregate aggregate,
    List<JFilter> filter,
    String groupby,
    List<String> orderby,
    String starttime,
    String endtime)
  {
    this();
    this.select = select;
    this.aggregate = aggregate;
    this.filter = filter;
    this.groupby = groupby;
    this.orderby = orderby;
    this.starttime = starttime;
    this.endtime = endtime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JQuery(JQuery other) {
    if (other.isSetSelect()) {
      this.select = other.select;
    }
    if (other.isSetAggregate()) {
      this.aggregate = other.aggregate;
    }
    if (other.isSetFilter()) {
      List<JFilter> __this__filter = new ArrayList<JFilter>(other.filter.size());
      for (JFilter other_element : other.filter) {
        __this__filter.add(other_element);
      }
      this.filter = __this__filter;
    }
    if (other.isSetGroupby()) {
      this.groupby = other.groupby;
    }
    if (other.isSetOrderby()) {
      List<String> __this__orderby = new ArrayList<String>(other.orderby);
      this.orderby = __this__orderby;
    }
    if (other.isSetStarttime()) {
      this.starttime = other.starttime;
    }
    if (other.isSetEndtime()) {
      this.endtime = other.endtime;
    }
  }

  public JQuery deepCopy() {
    return new JQuery(this);
  }

  @Override
  public void clear() {
    this.select = null;
    this.aggregate = null;
    this.filter = null;
    this.groupby = null;
    this.orderby = null;
    this.starttime = null;
    this.endtime = null;
  }

  public String getSelect() {
    return this.select;
  }

  public JQuery setSelect(String select) {
    this.select = select;
    return this;
  }

  public void unsetSelect() {
    this.select = null;
  }

  /** Returns true if field select is set (has been assigned a value) and false otherwise */
  public boolean isSetSelect() {
    return this.select != null;
  }

  public void setSelectIsSet(boolean value) {
    if (!value) {
      this.select = null;
    }
  }

  public JAggregate getAggregate() {
    return this.aggregate;
  }

  public JQuery setAggregate(JAggregate aggregate) {
    this.aggregate = aggregate;
    return this;
  }

  public void unsetAggregate() {
    this.aggregate = null;
  }

  /** Returns true if field aggregate is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregate() {
    return this.aggregate != null;
  }

  public void setAggregateIsSet(boolean value) {
    if (!value) {
      this.aggregate = null;
    }
  }

  public int getFilterSize() {
    return (this.filter == null) ? 0 : this.filter.size();
  }

  public Iterator<JFilter> getFilterIterator() {
    return (this.filter == null) ? null : this.filter.iterator();
  }

  public void addToFilter(JFilter elem) {
    if (this.filter == null) {
      this.filter = new ArrayList<JFilter>();
    }
    this.filter.add(elem);
  }

  public List<JFilter> getFilter() {
    return this.filter;
  }

  public JQuery setFilter(List<JFilter> filter) {
    this.filter = filter;
    return this;
  }

  public void unsetFilter() {
    this.filter = null;
  }

  /** Returns true if field filter is set (has been assigned a value) and false otherwise */
  public boolean isSetFilter() {
    return this.filter != null;
  }

  public void setFilterIsSet(boolean value) {
    if (!value) {
      this.filter = null;
    }
  }

  public String getGroupby() {
    return this.groupby;
  }

  public JQuery setGroupby(String groupby) {
    this.groupby = groupby;
    return this;
  }

  public void unsetGroupby() {
    this.groupby = null;
  }

  /** Returns true if field groupby is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupby() {
    return this.groupby != null;
  }

  public void setGroupbyIsSet(boolean value) {
    if (!value) {
      this.groupby = null;
    }
  }

  public int getOrderbySize() {
    return (this.orderby == null) ? 0 : this.orderby.size();
  }

  public Iterator<String> getOrderbyIterator() {
    return (this.orderby == null) ? null : this.orderby.iterator();
  }

  public void addToOrderby(String elem) {
    if (this.orderby == null) {
      this.orderby = new ArrayList<String>();
    }
    this.orderby.add(elem);
  }

  public List<String> getOrderby() {
    return this.orderby;
  }

  public JQuery setOrderby(List<String> orderby) {
    this.orderby = orderby;
    return this;
  }

  public void unsetOrderby() {
    this.orderby = null;
  }

  /** Returns true if field orderby is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderby() {
    return this.orderby != null;
  }

  public void setOrderbyIsSet(boolean value) {
    if (!value) {
      this.orderby = null;
    }
  }

  public String getStarttime() {
    return this.starttime;
  }

  public JQuery setStarttime(String starttime) {
    this.starttime = starttime;
    return this;
  }

  public void unsetStarttime() {
    this.starttime = null;
  }

  /** Returns true if field starttime is set (has been assigned a value) and false otherwise */
  public boolean isSetStarttime() {
    return this.starttime != null;
  }

  public void setStarttimeIsSet(boolean value) {
    if (!value) {
      this.starttime = null;
    }
  }

  public String getEndtime() {
    return this.endtime;
  }

  public JQuery setEndtime(String endtime) {
    this.endtime = endtime;
    return this;
  }

  public void unsetEndtime() {
    this.endtime = null;
  }

  /** Returns true if field endtime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndtime() {
    return this.endtime != null;
  }

  public void setEndtimeIsSet(boolean value) {
    if (!value) {
      this.endtime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SELECT:
      if (value == null) {
        unsetSelect();
      } else {
        setSelect((String)value);
      }
      break;

    case AGGREGATE:
      if (value == null) {
        unsetAggregate();
      } else {
        setAggregate((JAggregate)value);
      }
      break;

    case FILTER:
      if (value == null) {
        unsetFilter();
      } else {
        setFilter((List<JFilter>)value);
      }
      break;

    case GROUPBY:
      if (value == null) {
        unsetGroupby();
      } else {
        setGroupby((String)value);
      }
      break;

    case ORDERBY:
      if (value == null) {
        unsetOrderby();
      } else {
        setOrderby((List<String>)value);
      }
      break;

    case STARTTIME:
      if (value == null) {
        unsetStarttime();
      } else {
        setStarttime((String)value);
      }
      break;

    case ENDTIME:
      if (value == null) {
        unsetEndtime();
      } else {
        setEndtime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SELECT:
      return getSelect();

    case AGGREGATE:
      return getAggregate();

    case FILTER:
      return getFilter();

    case GROUPBY:
      return getGroupby();

    case ORDERBY:
      return getOrderby();

    case STARTTIME:
      return getStarttime();

    case ENDTIME:
      return getEndtime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SELECT:
      return isSetSelect();
    case AGGREGATE:
      return isSetAggregate();
    case FILTER:
      return isSetFilter();
    case GROUPBY:
      return isSetGroupby();
    case ORDERBY:
      return isSetOrderby();
    case STARTTIME:
      return isSetStarttime();
    case ENDTIME:
      return isSetEndtime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JQuery)
      return this.equals((JQuery)that);
    return false;
  }

  public boolean equals(JQuery that) {
    if (that == null)
      return false;

    boolean this_present_select = true && this.isSetSelect();
    boolean that_present_select = true && that.isSetSelect();
    if (this_present_select || that_present_select) {
      if (!(this_present_select && that_present_select))
        return false;
      if (!this.select.equals(that.select))
        return false;
    }

    boolean this_present_aggregate = true && this.isSetAggregate();
    boolean that_present_aggregate = true && that.isSetAggregate();
    if (this_present_aggregate || that_present_aggregate) {
      if (!(this_present_aggregate && that_present_aggregate))
        return false;
      if (!this.aggregate.equals(that.aggregate))
        return false;
    }

    boolean this_present_filter = true && this.isSetFilter();
    boolean that_present_filter = true && that.isSetFilter();
    if (this_present_filter || that_present_filter) {
      if (!(this_present_filter && that_present_filter))
        return false;
      if (!this.filter.equals(that.filter))
        return false;
    }

    boolean this_present_groupby = true && this.isSetGroupby();
    boolean that_present_groupby = true && that.isSetGroupby();
    if (this_present_groupby || that_present_groupby) {
      if (!(this_present_groupby && that_present_groupby))
        return false;
      if (!this.groupby.equals(that.groupby))
        return false;
    }

    boolean this_present_orderby = true && this.isSetOrderby();
    boolean that_present_orderby = true && that.isSetOrderby();
    if (this_present_orderby || that_present_orderby) {
      if (!(this_present_orderby && that_present_orderby))
        return false;
      if (!this.orderby.equals(that.orderby))
        return false;
    }

    boolean this_present_starttime = true && this.isSetStarttime();
    boolean that_present_starttime = true && that.isSetStarttime();
    if (this_present_starttime || that_present_starttime) {
      if (!(this_present_starttime && that_present_starttime))
        return false;
      if (!this.starttime.equals(that.starttime))
        return false;
    }

    boolean this_present_endtime = true && this.isSetEndtime();
    boolean that_present_endtime = true && that.isSetEndtime();
    if (this_present_endtime || that_present_endtime) {
      if (!(this_present_endtime && that_present_endtime))
        return false;
      if (!this.endtime.equals(that.endtime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_select = true && (isSetSelect());
    list.add(present_select);
    if (present_select)
      list.add(select);

    boolean present_aggregate = true && (isSetAggregate());
    list.add(present_aggregate);
    if (present_aggregate)
      list.add(aggregate);

    boolean present_filter = true && (isSetFilter());
    list.add(present_filter);
    if (present_filter)
      list.add(filter);

    boolean present_groupby = true && (isSetGroupby());
    list.add(present_groupby);
    if (present_groupby)
      list.add(groupby);

    boolean present_orderby = true && (isSetOrderby());
    list.add(present_orderby);
    if (present_orderby)
      list.add(orderby);

    boolean present_starttime = true && (isSetStarttime());
    list.add(present_starttime);
    if (present_starttime)
      list.add(starttime);

    boolean present_endtime = true && (isSetEndtime());
    list.add(present_endtime);
    if (present_endtime)
      list.add(endtime);

    return list.hashCode();
  }

  @Override
  public int compareTo(JQuery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSelect()).compareTo(other.isSetSelect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.select, other.select);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregate()).compareTo(other.isSetAggregate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggregate, other.aggregate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilter()).compareTo(other.isSetFilter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupby()).compareTo(other.isSetGroupby());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupby()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupby, other.groupby);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderby()).compareTo(other.isSetOrderby());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderby()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderby, other.orderby);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarttime()).compareTo(other.isSetStarttime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarttime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starttime, other.starttime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndtime()).compareTo(other.isSetEndtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endtime, other.endtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JQuery(");
    boolean first = true;

    sb.append("select:");
    if (this.select == null) {
      sb.append("null");
    } else {
      sb.append(this.select);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aggregate:");
    if (this.aggregate == null) {
      sb.append("null");
    } else {
      sb.append(this.aggregate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filter:");
    if (this.filter == null) {
      sb.append("null");
    } else {
      sb.append(this.filter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupby:");
    if (this.groupby == null) {
      sb.append("null");
    } else {
      sb.append(this.groupby);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderby:");
    if (this.orderby == null) {
      sb.append("null");
    } else {
      sb.append(this.orderby);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("starttime:");
    if (this.starttime == null) {
      sb.append("null");
    } else {
      sb.append(this.starttime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endtime:");
    if (this.endtime == null) {
      sb.append("null");
    } else {
      sb.append(this.endtime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JQueryStandardSchemeFactory implements SchemeFactory {
    public JQueryStandardScheme getScheme() {
      return new JQueryStandardScheme();
    }
  }

  private static class JQueryStandardScheme extends StandardScheme<JQuery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JQuery struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // SELECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.select = iprot.readString();
              struct.setSelectIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGGREGATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.aggregate = new JAggregate();
              struct.aggregate.read(iprot);
              struct.setAggregateIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILTER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.filter = new ArrayList<JFilter>(_list24.size);
                JFilter _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new JFilter();
                  _elem25.read(iprot);
                  struct.filter.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setFilterIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUPBY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupby = iprot.readString();
              struct.setGroupbyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDERBY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.orderby = new ArrayList<String>(_list27.size);
                String _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = iprot.readString();
                  struct.orderby.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setOrderbyIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STARTTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.starttime = iprot.readString();
              struct.setStarttimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endtime = iprot.readString();
              struct.setEndtimeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JQuery struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.select != null) {
        oprot.writeFieldBegin(SELECT_FIELD_DESC);
        oprot.writeString(struct.select);
        oprot.writeFieldEnd();
      }
      if (struct.aggregate != null) {
        oprot.writeFieldBegin(AGGREGATE_FIELD_DESC);
        struct.aggregate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.filter != null) {
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filter.size()));
          for (JFilter _iter30 : struct.filter)
          {
            _iter30.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.groupby != null) {
        oprot.writeFieldBegin(GROUPBY_FIELD_DESC);
        oprot.writeString(struct.groupby);
        oprot.writeFieldEnd();
      }
      if (struct.orderby != null) {
        oprot.writeFieldBegin(ORDERBY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.orderby.size()));
          for (String _iter31 : struct.orderby)
          {
            oprot.writeString(_iter31);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.starttime != null) {
        oprot.writeFieldBegin(STARTTIME_FIELD_DESC);
        oprot.writeString(struct.starttime);
        oprot.writeFieldEnd();
      }
      if (struct.endtime != null) {
        oprot.writeFieldBegin(ENDTIME_FIELD_DESC);
        oprot.writeString(struct.endtime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JQueryTupleSchemeFactory implements SchemeFactory {
    public JQueryTupleScheme getScheme() {
      return new JQueryTupleScheme();
    }
  }

  private static class JQueryTupleScheme extends TupleScheme<JQuery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JQuery struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSelect()) {
        optionals.set(0);
      }
      if (struct.isSetAggregate()) {
        optionals.set(1);
      }
      if (struct.isSetFilter()) {
        optionals.set(2);
      }
      if (struct.isSetGroupby()) {
        optionals.set(3);
      }
      if (struct.isSetOrderby()) {
        optionals.set(4);
      }
      if (struct.isSetStarttime()) {
        optionals.set(5);
      }
      if (struct.isSetEndtime()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSelect()) {
        oprot.writeString(struct.select);
      }
      if (struct.isSetAggregate()) {
        struct.aggregate.write(oprot);
      }
      if (struct.isSetFilter()) {
        {
          oprot.writeI32(struct.filter.size());
          for (JFilter _iter32 : struct.filter)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetGroupby()) {
        oprot.writeString(struct.groupby);
      }
      if (struct.isSetOrderby()) {
        {
          oprot.writeI32(struct.orderby.size());
          for (String _iter33 : struct.orderby)
          {
            oprot.writeString(_iter33);
          }
        }
      }
      if (struct.isSetStarttime()) {
        oprot.writeString(struct.starttime);
      }
      if (struct.isSetEndtime()) {
        oprot.writeString(struct.endtime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JQuery struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.select = iprot.readString();
        struct.setSelectIsSet(true);
      }
      if (incoming.get(1)) {
        struct.aggregate = new JAggregate();
        struct.aggregate.read(iprot);
        struct.setAggregateIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.filter = new ArrayList<JFilter>(_list34.size);
          JFilter _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new JFilter();
            _elem35.read(iprot);
            struct.filter.add(_elem35);
          }
        }
        struct.setFilterIsSet(true);
      }
      if (incoming.get(3)) {
        struct.groupby = iprot.readString();
        struct.setGroupbyIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.orderby = new ArrayList<String>(_list37.size);
          String _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = iprot.readString();
            struct.orderby.add(_elem38);
          }
        }
        struct.setOrderbyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.starttime = iprot.readString();
        struct.setStarttimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endtime = iprot.readString();
        struct.setEndtimeIsSet(true);
      }
    }
  }

}

