/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package api.thrift;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-9-18")
public class JAggregate implements org.apache.thrift.TBase<JAggregate, JAggregate._Fields>, java.io.Serializable, Cloneable, Comparable<JAggregate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JAggregate");

  private static final org.apache.thrift.protocol.TField AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("avg", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sum", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JAggregateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JAggregateTupleSchemeFactory());
  }

  public List<String> avg; // required
  public List<String> count; // required
  public List<String> sum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AVG((short)1, "avg"),
    COUNT((short)2, "count"),
    SUM((short)3, "sum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AVG
          return AVG;
        case 2: // COUNT
          return COUNT;
        case 3: // SUM
          return SUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AVG, new org.apache.thrift.meta_data.FieldMetaData("avg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SUM, new org.apache.thrift.meta_data.FieldMetaData("sum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JAggregate.class, metaDataMap);
  }

  public JAggregate() {
  }

  public JAggregate(
    List<String> avg,
    List<String> count,
    List<String> sum)
  {
    this();
    this.avg = avg;
    this.count = count;
    this.sum = sum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JAggregate(JAggregate other) {
    if (other.isSetAvg()) {
      List<String> __this__avg = new ArrayList<String>(other.avg);
      this.avg = __this__avg;
    }
    if (other.isSetCount()) {
      List<String> __this__count = new ArrayList<String>(other.count);
      this.count = __this__count;
    }
    if (other.isSetSum()) {
      List<String> __this__sum = new ArrayList<String>(other.sum);
      this.sum = __this__sum;
    }
  }

  public JAggregate deepCopy() {
    return new JAggregate(this);
  }

  @Override
  public void clear() {
    this.avg = null;
    this.count = null;
    this.sum = null;
  }

  public int getAvgSize() {
    return (this.avg == null) ? 0 : this.avg.size();
  }

  public Iterator<String> getAvgIterator() {
    return (this.avg == null) ? null : this.avg.iterator();
  }

  public void addToAvg(String elem) {
    if (this.avg == null) {
      this.avg = new ArrayList<String>();
    }
    this.avg.add(elem);
  }

  public List<String> getAvg() {
    return this.avg;
  }

  public JAggregate setAvg(List<String> avg) {
    this.avg = avg;
    return this;
  }

  public void unsetAvg() {
    this.avg = null;
  }

  /** Returns true if field avg is set (has been assigned a value) and false otherwise */
  public boolean isSetAvg() {
    return this.avg != null;
  }

  public void setAvgIsSet(boolean value) {
    if (!value) {
      this.avg = null;
    }
  }

  public int getCountSize() {
    return (this.count == null) ? 0 : this.count.size();
  }

  public Iterator<String> getCountIterator() {
    return (this.count == null) ? null : this.count.iterator();
  }

  public void addToCount(String elem) {
    if (this.count == null) {
      this.count = new ArrayList<String>();
    }
    this.count.add(elem);
  }

  public List<String> getCount() {
    return this.count;
  }

  public JAggregate setCount(List<String> count) {
    this.count = count;
    return this;
  }

  public void unsetCount() {
    this.count = null;
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return this.count != null;
  }

  public void setCountIsSet(boolean value) {
    if (!value) {
      this.count = null;
    }
  }

  public int getSumSize() {
    return (this.sum == null) ? 0 : this.sum.size();
  }

  public Iterator<String> getSumIterator() {
    return (this.sum == null) ? null : this.sum.iterator();
  }

  public void addToSum(String elem) {
    if (this.sum == null) {
      this.sum = new ArrayList<String>();
    }
    this.sum.add(elem);
  }

  public List<String> getSum() {
    return this.sum;
  }

  public JAggregate setSum(List<String> sum) {
    this.sum = sum;
    return this;
  }

  public void unsetSum() {
    this.sum = null;
  }

  /** Returns true if field sum is set (has been assigned a value) and false otherwise */
  public boolean isSetSum() {
    return this.sum != null;
  }

  public void setSumIsSet(boolean value) {
    if (!value) {
      this.sum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case AVG:
      if (value == null) {
        unsetAvg();
      } else {
        setAvg((List<String>)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((List<String>)value);
      }
      break;

    case SUM:
      if (value == null) {
        unsetSum();
      } else {
        setSum((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case AVG:
      return getAvg();

    case COUNT:
      return getCount();

    case SUM:
      return getSum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case AVG:
      return isSetAvg();
    case COUNT:
      return isSetCount();
    case SUM:
      return isSetSum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JAggregate)
      return this.equals((JAggregate)that);
    return false;
  }

  public boolean equals(JAggregate that) {
    if (that == null)
      return false;

    boolean this_present_avg = true && this.isSetAvg();
    boolean that_present_avg = true && that.isSetAvg();
    if (this_present_avg || that_present_avg) {
      if (!(this_present_avg && that_present_avg))
        return false;
      if (!this.avg.equals(that.avg))
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (!this.count.equals(that.count))
        return false;
    }

    boolean this_present_sum = true && this.isSetSum();
    boolean that_present_sum = true && that.isSetSum();
    if (this_present_sum || that_present_sum) {
      if (!(this_present_sum && that_present_sum))
        return false;
      if (!this.sum.equals(that.sum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_avg = true && (isSetAvg());
    list.add(present_avg);
    if (present_avg)
      list.add(avg);

    boolean present_count = true && (isSetCount());
    list.add(present_count);
    if (present_count)
      list.add(count);

    boolean present_sum = true && (isSetSum());
    list.add(present_sum);
    if (present_sum)
      list.add(sum);

    return list.hashCode();
  }

  @Override
  public int compareTo(JAggregate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAvg()).compareTo(other.isSetAvg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avg, other.avg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSum()).compareTo(other.isSetSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sum, other.sum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JAggregate(");
    boolean first = true;

    sb.append("avg:");
    if (this.avg == null) {
      sb.append("null");
    } else {
      sb.append(this.avg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    if (this.count == null) {
      sb.append("null");
    } else {
      sb.append(this.count);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sum:");
    if (this.sum == null) {
      sb.append("null");
    } else {
      sb.append(this.sum);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JAggregateStandardSchemeFactory implements SchemeFactory {
    public JAggregateStandardScheme getScheme() {
      return new JAggregateStandardScheme();
    }
  }

  private static class JAggregateStandardScheme extends StandardScheme<JAggregate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JAggregate struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // AVG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.avg = new ArrayList<String>(_list40.size);
                String _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readString();
                  struct.avg.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setAvgIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.count = new ArrayList<String>(_list43.size);
                String _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = iprot.readString();
                  struct.count.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setCountIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                struct.sum = new ArrayList<String>(_list46.size);
                String _elem47;
                for (int _i48 = 0; _i48 < _list46.size; ++_i48)
                {
                  _elem47 = iprot.readString();
                  struct.sum.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setSumIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JAggregate struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.avg != null) {
        oprot.writeFieldBegin(AVG_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.avg.size()));
          for (String _iter49 : struct.avg)
          {
            oprot.writeString(_iter49);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.count != null) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.count.size()));
          for (String _iter50 : struct.count)
          {
            oprot.writeString(_iter50);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sum != null) {
        oprot.writeFieldBegin(SUM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sum.size()));
          for (String _iter51 : struct.sum)
          {
            oprot.writeString(_iter51);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JAggregateTupleSchemeFactory implements SchemeFactory {
    public JAggregateTupleScheme getScheme() {
      return new JAggregateTupleScheme();
    }
  }

  private static class JAggregateTupleScheme extends TupleScheme<JAggregate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JAggregate struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAvg()) {
        optionals.set(0);
      }
      if (struct.isSetCount()) {
        optionals.set(1);
      }
      if (struct.isSetSum()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAvg()) {
        {
          oprot.writeI32(struct.avg.size());
          for (String _iter52 : struct.avg)
          {
            oprot.writeString(_iter52);
          }
        }
      }
      if (struct.isSetCount()) {
        {
          oprot.writeI32(struct.count.size());
          for (String _iter53 : struct.count)
          {
            oprot.writeString(_iter53);
          }
        }
      }
      if (struct.isSetSum()) {
        {
          oprot.writeI32(struct.sum.size());
          for (String _iter54 : struct.sum)
          {
            oprot.writeString(_iter54);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JAggregate struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.avg = new ArrayList<String>(_list55.size);
          String _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = iprot.readString();
            struct.avg.add(_elem56);
          }
        }
        struct.setAvgIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.count = new ArrayList<String>(_list58.size);
          String _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = iprot.readString();
            struct.count.add(_elem59);
          }
        }
        struct.setCountIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sum = new ArrayList<String>(_list61.size);
          String _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readString();
            struct.sum.add(_elem62);
          }
        }
        struct.setSumIsSet(true);
      }
    }
  }

}

